/*
 *  UCF COP3330 Fall 2021 Assignment 4 Solution
 *  Copyright 2021 Eric Gass
 */

Class Item
{
    String description holding a description
    String date storing a date in the format yyyy/mm/dd
    String completion stating "Complete" or "Incomplete" depending on the set variable

    public Item(String description, String date, String completion)
    {
        a constructor creating the item with a passed description date and completion
    }

    public String getDescription()
    {
        returns the items description
    }
    public void setDescription(String description)
    {
        sets the items description to the given string
    }
    public String getDate()
    {
        returns the items date
    }
    public void setDate(String date)
    {
        sets the items date to the given string
    }
    public String getCompletion()
    {
        returns the items completion status
    }
    public void setComplete(String completion)
    {
        sets the items completion status to the given string
    }
}

Class ToDoController
{
    The Controller holds all of the Application objects and their relative functions

    The Controller will hold an array of items and these will be displayed in the table JFX element

    TableView<Item> table a javaFX element of the table that displays items
    TableColumn<Item,String> description a javaFX element of a column of a table
    TableColumn<Item, String> date a javaFX element of a column of a table
    TableColumn<Item,String> completion a javaFX element of a column of a table
    TextField descriptionField a javaFX element of a field that text is inputted into
    DatePicker dateField a javaFX element of a field that the date is inputted into
    CheckBox completionField a javaFX element of a checkbox that signifies if the object is completed or not
    Button addItem a javaFX element of a button
    Button removeItem a javaFX element of a button
    Button clearItem a javaFX element of a button
    Button updateItem a javaFX element of a button
    Button showIncomplete a javaFX element of a button
    Button showComplete a javaFX element of a button
    Button showAll a javaFX element of a button
    MenuItem saveButton a javaFX element of a button
    MenuItem loadButton a javaFX element of a button
    ObservableList<Item> list an observable list that gets passed into the table element containing all of the Item objects


    protected void initialize()
    {
        Set the column elements to use the correct information from the item objects
        then set the table to show the list
    }

    public void addItemClick(ActionEvent actionEvent)
    {
        Takes the values from the different javaFX fields stores them in an item and sends them to addItem()
    }

    public void addItem(Item item)
    {
        adds the item to the observablelist of all items.
    }

    public void removeItemClick(ActionEvent actionEvent)
    {
        gets the selected item in the table and passes it to the removeItem() function
    }

    public void removeItem(Item item)
    {
        removes the given item in the oberveablelist
    }

    public void clearItemClick(ActionEvent actionEvent)
    {
        calls the clearItem() function
        then refreshes the table, so the user can see the cleared observablelist
    }

    public void clearItem()
    {
        clears the observablelist
    }

    public void updateItemClick(ActionEvent actionEvent)
    {
        gets the selected item, description, date, and completion status, from the JFX elements
        and passes them to updateItem()
    }

    public void updateItem(Item item, String desc, String date, String comp)
    {
        sets the selected items variables to the given variables
    }

    public void showIncompleteClick(ActionEvent actionEvent)
    {
        sets the table to show the results of the showIncomplete() function
    }

    public ObservableList<Item> showIncomplete()
    {
        creates a new empty observable list
        then loop through the main observable list and add any item with "Incomplete" to the new observable list
        and return the filled list
    }

    public void showCompleteClick(ActionEvent actionEvent)
    {
        sets the table to show the results of the showComplete() function
    }

    public ObservableList<Item> showComplete()
    {
        creates a new empty observable list
        then loop through the main observable list and add any item with "Complete" to the new observable list
        and return the filled list
    }

    public void showAllClick(ActionEvent actionEvent)
    {
        runs the showAll function when the showAll button is pressed
    }

    public void showAll()
    {
        sets the table to display the main list, rather than the complete or incomplete lists
        and then refreshes the table so the list actually displays
    }

    public void saveButtonClick(ActionEvent actionEvent) throws IOException
    {
        Once the Save button is pressed, open up the file chooser menu
        and give the filechooser the .txt extension so the saved file will be in that format
        then when the user names and selects the file, pass the file to the saveList function.
    }

    public void saveList(File file) throws IOException
    {
        Use a fileWrite to take the information from each item in a list
        and write it to the given file.
        loop through each item and paste their description, date, and status separated by a ;
    }

    public void loadButtonClick(ActionEvent actionEvent) throws IOException {
        Once the load button is pressed, open up the file chooser menu
        and give the filechooser the .txt extension so the loaded file will be of that format
        then when the user selects the file, pass the file to the loadList function.
    }

    public void loadList(File file) throws IOException
    {
        Create a scanner that can only read from the given file
        loop through each line of the file
        {
            read until the first ; is hit and add that string to the description field of an item
            read until the second ; is hit and add that string to the date field of an item
            read the remaning string into the status field of an item
            make an item with these variables and add it to the observablelist
        }
    }

    public void displaySelected(MouseEvent event)
    {
        find the selected item in the table
        if that item exists within the observable list
        set the description field JFX element to have that items description
        set the date DatePicker JFX element to have that items date
        set the completion checkbox to the items completion status

        this function makes it easier to update an Item, as the variables of the item will already be in the fields to edit
    }

Class ToDoApp
{
    Function start(Stage stage)
    {
        This function loads the Application window up so it can be started with the main function
    }

    Function main()
    {
        Runs the launch() function to make the application open/
    }
}