/*
 *  UCF COP3330 Fall 2021 Assignment 4 Solution
 *  Copyright 2021 Eric Gass
 */


public class ControllerTest
{
    TestCase 01
    void isList()
    {
        Create a ToDoController object
        manually create an item
        create 101 of that item and add them to the list
        check to see if the list had 101 items in it
    }

    TestCase 02
    void itemDescription()
    {
        manually create an item using its constructor
        check to see if the description field of the item equals a string of the desired description
    }

    TestCase 03
    void dateDescription()
    {
        manually create an item using its constructor
        check to see if the date field of the item equals a string of the desired date
    }

    TestCase 04
    void addItem()
    {
        Create a ToDoController object
        manually create an item
        call the todocontrollers addItem() function with the item
        check to see if the item is now stored within the todocontrollers list variable
    }

    TestCase 05
    void removeItem()
    {
        Create a ToDoController object
        manually create an item
        Add the item to the todocontroller list with the addItem() function
        remove the item from the ToDoController list with the removeItem() funtion
        check to see if the item is not in the list
    }

    TestCase 06
    void clearList()
    {
        Create a ToDoController object
        manually create an item

        add 101 items to the ToDoControllers list
        clear the 101 items from the list with the clearList() function
        check to see if the list is empty
    }

    TestCase 07,08,09
    void updateItem()
    {
        Create a ToDoController object
        manually create an item
        Add the item to a list

        check to see if the date description and status are set on the item
        call the ToDoControllers updateItem() function and pass it new variables and the item
        check to see if the date description and status of the new item reflect the new updated values
    }

    TestCase 10
    void showAll()
    {
        Create a ToDoController object
        manually create an item
        Add the item to a list

        Check to see if the item is in the main ToDoControllers list
    }

    TestCase 11
    void showIncomplete()
    {
        Create a ToDoController object
        manually create two items one marked complete and one marked incomplete
        Add the items to a list

        check to see if the item in the ToDoControllers showIncomplete() list is equal to the incomplete manually made object
    }

    TestCase 12
    void showComplete()
    {
        Create a ToDoController object
        manually create two items one marked complete and one marked incomplete
        Add the items to a list

        check to see if the item in the ToDoControllers showComplete() list is equal to the complete manually made object
    }

    TestCase 13
    void saveList() throws IOException
    {
        Create a ToDoController object
        manually create an item
        Add the item to a list

        Create a file and give it a specified path
        Call the ToDoControllers saveList() function with the given file
        Create a Scanner to read in from the File
        Check to see if the first line of the file matches the items description, date, and completion status
    }

    TestCase 14
    void loadList() throws IOException
    {
        Create a ToDoController object
        Create a file and give it a specified path using the path from testcase 13
        Call the ToDoControllers loadList() function with the file.
        Check to see if the ToDoControllers list now contains an item with the specified description date and completion status
    }
}